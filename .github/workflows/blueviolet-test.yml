name: Pull request

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - "**"

jobs:
  test:
    timeout-minutes: 10
    runs-on: ubuntu-latest

    steps:
      # 해당 저장소의 코드를 가져온다.
      - name: Checkout
        uses: actions/checkout@v4

      # docker-compose를 활용하여 테스트를 위한 컨테이너 환경을 구성한다.
      - name: Start containers
        run: docker-compose -f "./docker/docker-compose.yml" up -d --build

      # Java 17을 사용한다.
      - name: Install JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17

      # Gradle wrapper 파일 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle test 실행
      - name: Test with Gradle
        run: ./gradlew --info test

      # 테스트 후 Result 출력
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: build/test-results/**/*.xml

      # 캐시 파일 삭제
      - name: Cleanup Gradle Cache
        if: always()
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

      # 앞의 작업에 대한 성공 여부와 관계 없이 컨테이너들을 종료한다.
      - name: Stop containers
        if: always()
        run: docker-compose -f "./docker/docker-compose.yml" down